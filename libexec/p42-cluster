#!/usr/bin/env bash

# Usage: p42 cluster [host|unhost|create|add|stop|ls|env] [<option>...]
# Summary: Create/manage a cluster (a Docker Swarm).
# Help: To find out about a specific subcommand:
#
#    p42 cluster help <command>
#

clusters="${HOME}/.config/p42/clusters"
mkdir -p "${clusters}"

action="$1"
shift

# test SSH
# ssh -i ~/.docker/machine/certs/cert.pem ubuntu@<IP-of-your-instance> -v

case "$action" in

  create)

    name=$(p42 name)

    echo Creating VPC [${name}]...
    directory=$(mktemp -d "${TMPDIR:-/tmp}/p42.XXXXXXXXX")
    path=${directory}/cf-template.yaml
    # Originally, I was going to templatize the file,
    # but I'm no longer sure that's necessary...
    yaml json write $_P42_ROOT/share/cf-template.yaml > ${path}
    aws cloudformation create-stack \
      --stack-name ${name} \
      --template-body file:///${path} \
      > /dev/null

    while true; do
      sleep 1
      description=$(aws cloudformation describe-stacks --stack-name ${name})
      status=$(json Stacks[0].StackStatus <<<"${description}")
      if [ "$status" == "CREATE_COMPLETE" ]; then
        break
      fi
    done

    echo VPC [${name}] created.

    vpc=$(json Stacks[0].Outputs[0].OutputValue <<<"${description}")
    subnet=$(json Stacks[0].Outputs[1].OutputValue <<<"${description}")
    az=$(json Stacks[0].Outputs[2].OutputValue <<<"${description}")
    region="${az%?}"
    zone="${az: -1}"

    cat > "${clusters}/${name}" <<EOF
vpc: ${vpc}
subnet: ${subnet}
region: ${region}
zone: ${zone}
EOF

    echo Creating Docker host...

    docker-machine create ${name} \
      --driver amazonec2 \
      --amazonec2-region ${region} \
      --amazonec2-vpc-id ${vpc} \
      --amazonec2-subnet-id ${subnet} \
      --amazonec2-zone ${zone}

    echo Creating Swarm master...

    eval "$(docker-machine env ${name})"

    echo Generating token...
    swarm=$(docker run swarm create)

    echo "Creating Swarm Master for token://${swarm}..."
    docker-machine create \
      --driver amazonec2 \
      --amazonec2-region ${region} \
      --amazonec2-vpc-id ${vpc} \
      --amazonec2-subnet-id ${subnet} \
      --amazonec2-zone ${zone} \
      --swarm --swarm-master \
      --swarm-discovery token://${swarm} \
      ${name}-00
    ;;

  add)

    name=$1
    shift
    if [ ! -e "${clusters}/${name}" ]; then
      echo p42: Invalid cluster: ${name}
      exit -1
    fi

    # process options...
    while [ $# -gt 0 ]; do
      case $1 in
        -n)
          n=$2
          shift; shift
          ;;
        *)
          # ignore
          shift
          ;;
      esac
    done

    i=${n:-1}
    swarm=$(docker-machine inspect ${name}-00 \
      -f '{{ .HostOptions.SwarmOptions.Discovery }}')
    echo "Adding $i node(s) to cluster [${name}]..."

    region=$(yaml get ${clusters}/${name} region)
    zone=$(yaml get ${clusters}/${name} zone)
    vpc=$(yaml get ${clusters}/${name} vpc)
    subnet=$(yaml get ${clusters}/${name} subnet)

    while [ $i -gt 0 ]; do
      i=$[$i-1]
      candidates=$(echo ${name}-{0..9}{0..9})
      for _name in $candidates; do
        docker-machine inspect $_name &> /dev/null
        if [ $? -ne 0 ]; then
          echo Creating machine [$_name]...
          docker-machine create \
            --driver amazonec2 \
            --amazonec2-region ${region} \
            --amazonec2-vpc-id ${vpc} \
            --amazonec2-subnet-id ${subnet} \
            --amazonec2-zone ${zone} \
            --swarm --swarm-discovery ${swarm} \
            ${_name}
          break
        fi
      done
    done

    ;;

  stop)

    name=$1
    shift
    if [ ! -e "${clusters}/${name}" ]; then
      echo p42: Invalid cluster: ${name}
      exit -1
    fi

    echo Stopping Swarm...
    machines=$(docker-machine ls \
      --format '{{ .Name }}' \
      --filter "name=${name}")
    docker-machine stop $machines
    docker-machine rm $machines

    echo Deleting VPC...
    aws cloudformation delete-stack --stack-name ${name}
    rm ${clusters}/${name}
    ;;

  ls)
    name=$1
    shift
    if [ ! -e "${clusters}/${name}" ]; then
      echo p42: Invalid cluster: ${name}
      exit -1
    fi

    docker-machine ls --filter "name=${name}-"
    ;;

  env)

    name=$1
    shift
    if [ ! -e "${clusters}/${name}" ]; then
      echo p42: Invalid cluster: ${name}
      exit -1
    fi

    if [ $machine ]; then
      docker-machine env --swarm "${name}-00"
    else
      docker-machine env ${name}
    fi
    ;;

  help)
    topic="$1"
    if [ ! $topic ]; then
      exec $_P42_ROOT/libexec/p42-help cluster
    fi

    case "$topic" in

      create)
        cat <<EOF
Usage: p42 cluster create
Create a VPC, bootstrap Docker Host, and a master Swarm node.
EOF
        ;;
      add)
        cat <<EOF
Usage: p42 cluster add [--size <size>]
Add a node to the cluster.

You can add multiple nodes using --size.
So to add 3 nodes to the cluster:

    p42 cluster add --size 3
EOF
        ;;
      stop)
        cat <<EOF
Usage: p42 cluster stop
Stop a given cluster (Swarm) and remove the associated machines.
EOF
        ;;
      ls)
        cat <<EOF
Usage: p42 cluster ls
List all the machines in a cluster.
EOF
        ;;
      env)
        cat <<'EOF'
Usage: p42 cluster env
Set up your environment to use Docker with your cluster.

    eval $(p42 cluster env)
EOF
        ;;
      *)
        echo "'$topic' is not a valid subcommand"
        exec $_P42_ROOT/libexec/p42-help cluster
    esac
    ;;

  *)
    exec $_P42_ROOT/libexec/p42-help cluster
    ;;

esac
