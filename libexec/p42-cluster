#!/usr/bin/env bash

# Usage: p42 cluster [host|unhost|create|add|stop|ls|env] [<option>...]
# Summary: Create/manage a cluster (a Docker Swarm).
# Help: To find out about a specific subcommand:
#
#    p42 cluster help <command>
#

token=${DIGITALOCEAN_TOKEN}

# TODO: we may be able to support multiple
# (named) clusters by using and filtering
# by label

action="$1"
shift

case "$action" in

  host)
    echo Creating default machine...
    docker-machine create default\
      --driver digitalocean \
      --digitalocean-access-token ${token} \
      --digitalocean-region=sfo1 \
    ;;

  unhost)
    echo Removing default machine...
    docker-machine stop default
    docker-machine rm default
    ;;

  create)
    eval "$(docker-machine env default)"

    echo Generating token...
    swarm=$(docker run swarm create)

    echo "Creating Swarm Master for token://${swarm}..."
    docker-machine create \
      --driver digitalocean \
      --digitalocean-access-token ${token} \
      --digitalocean-region=sfo1 \
      --swarm --swarm-master \
      --swarm-discovery token://${swarm} \
      swarm-00
    ;;

  add)

    # process options...
    while [ $# -gt 0 ]; do
      case $1 in
        -c|--count)
          count=$2
          shift; shift
          ;;
        *)
          # ignore
          shift
          ;;
      esac
    done

    i=${count:-1}
    swarm=$(docker-machine inspect swarm-00 \
      -f '{{ .HostOptions.SwarmOptions.Discovery }}')
    echo "Adding $i node(s) to Swarm for ${swarm}..."
    while [ $i -gt 0 ]; do
      i=$[$i-1]
      candidates=$(echo swarm-{0..9}{0..9})
      for name in $candidates; do
        docker-machine inspect $name &> /dev/null
        if [ $? -ne 0 ]; then
          echo Creating machine [$name]...
          docker-machine create \
            --driver digitalocean \
            --digitalocean-access-token ${token} \
            --digitalocean-region=sfo1 \
            --swarm --swarm-discovery ${swarm} \
            ${name}
          break
        fi
      done
    done
    ;;

  stop)
    echo Stopping Swarm...
    machines=$(docker-machine ls --format '{{ .Name }}' | grep swarm)
    docker-machine stop $machines
    docker-machine rm $machines
    ;;

  ls)
    docker-machine ls
    ;;

  env)
    machine=$(docker-machine ls --format '{{ .Name }}' | grep swarm-00)
    if [ $machine ]; then
      docker-machine env --swarm $machine
    else
      docker-machine env default
    fi
    ;;

  help)
    topic="$1"
    if [ ! $topic ]; then
      exec $_P42_ROOT/libexec/p42-help cluster
    fi

    case "$topic" in
      host)
        cat <<EOF
Usage: p42 cluster host
Set up a default Docker host to bootstrap the cluster.
EOF
        ;;
      unhost)
        cat <<EOF
Usage: p42 cluster unhost
Remote the default Docker host used to bootstrap the cluster.
EOF
        ;;
      create)
        cat <<EOF
Usage: p42 cluster create
Create a master Swarm node.
EOF
        ;;
      add)
        cat <<EOF
Usage: p42 cluster add [--size <size>]
Add a node to the cluster.

You can add multiple nodes using --size.
So to add 3 nodes to the cluster:

    p42 cluster add --size 3
EOF
        ;;
      stop)
        cat <<EOF
Usage: p42 cluster stop
Stop a given cluster (Swarm) and remove the associated machines.
EOF
        ;;
      ls)
        cat <<EOF
Usage: p42 cluster ls
List all the machines in a cluster.
EOF
        ;;
      env)
        cat <<'EOF'
Usage: p42 cluster env
Set up your environment to use Docker with your cluster.

    eval $(p42 cluster env)
EOF
        ;;
      *)
        echo "'$topic' is not a valid subcommand"
        exec $_P42_ROOT/libexec/p42-help cluster
    esac
    ;;
  *)
    exec $_P42_ROOT/libexec/p42-help cluster
    ;;

esac
