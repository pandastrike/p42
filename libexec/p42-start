#!/usr/bin/env bash

# Usage: p42 start [<component>]
# Summary: Start application component.
# Help: Start application component.
# You can start component for the entire application
# or just a given set of components. Images for each
# container must already exist.
#
#     p42 start
#     p42 start www redis
#
# You can build images first using the build subcommand.
# The run subcommand will build and start component for you.
#

source $_P42_ROOT/share/context.sh

if [ $# -gt 0 ]; then
  component="$@"
else
  if [ ! -d ./launch ]; then
    echo p42: nothing to start
    exit
  fi
  component=$(ls ./launch)
fi

# TODO: what if the swarm master dies?
eval $(docker-machine env --swarm ${cluster}-00)

dns-a() {

  _name=$1
  _ip=$2
  _comment=$3

  echo "Adding DNS A record for '${_name}'..."

  cat "${clusters}/${cluster}" |\
    yaml set - machine "${_name}" |\
    yaml set - comment "${_comment}" |\
    yaml set - ip ${_ip} |\
    yaml template - $_P42_ROOT/share/dns.yaml |\
    yaml json write - > "${tmpDir}/dns-${_name}.json"

  aws route53 change-resource-record-sets \
    --hosted-zone-id ${dns} \
    --change-batch file:///${tmpDir}/dns-${_name}.json \
    > /dev/null
}

for container in $component; do
  label=$name-$container
  echo Starting $label container...
  # TODO: add error handling for Docker errors?
  # TODO: components that launch multiple containers?
  # TODO: specifying constraints for Swarm deploy?

  docker run \
    -P \
    --name ${label} \
    --restart always \
    -d ${repo}/${label}:latest

  ip=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${label})
  dns-a $container $ip $label

done
